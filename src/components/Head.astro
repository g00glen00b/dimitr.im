---
import {CONFIG} from '../config/config';
import {type Tag} from '../models/Tag';
import {type Category} from '../models/Category';
import {format} from 'date-fns';

export interface Props {
  title?: string;
  description: string;
  path: string;
  publishedDate?: Date;
  tags?: Tag[];
  categories?: Category[];
  metaImage: string;
}

const {site: {url: siteUrl, title: siteTitle, logo}, author: {handle: author}} = CONFIG;
const {title, description, path, publishedDate, tags, categories, metaImage} = Astro.props;
const publishedDateString = publishedDate == null ? null : format(publishedDate, 'yyyy-MM-dd');
---
<head>
  <title>{title} | {siteTitle}</title>
  <meta charset="utf-8" />
  <meta http-equiv="x-ua-compatible" content="ie=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:site_name" content={siteTitle} />
  <meta property="og:type" content="website" />
  <meta property="og:locale" content="en_US" />
  <meta property="og:url" content={`${siteUrl}/${path}`} />
  <meta property="og:image" content={`${siteUrl}${metaImage}`} />
  <meta property="og:image:secure_url" content={`${siteUrl}${metaImage}`} />
  {publishedDateString && <meta property="og:updated_time" content={publishedDateString} />}
  {publishedDateString && <meta property="article:published_time" content={publishedDateString} />}
  {publishedDateString && <meta property="article:modified_time" content={publishedDateString} />}
  <meta name="author" content={author} />
  <meta name="description" content={description} />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:creator" content={author} />
  <meta name="twitter:title" content={title} />
  <meta name="twitter:description" content={description} />
  <meta name="twitter:site" content={author} />
  <meta name="twitter:image" content={`${siteUrl}${logo}`} />
  {(tags || []).map(({name}) => (
    <meta property="article:tag" content={name} />
  ))}
  {(categories || []).map(({name}) => (
    <meta property="article:section" content={name} />
  ))}
  <link rel="sitemap" type="application/xml" href={`${siteUrl}/sitemap-index.xml`}>
  <link rel="alternate" type="application/rss+xml" title="Feed" href={`${siteUrl}/rss.xml`} />
  <link rel="icon" href={`${siteUrl}${logo}`} />
  <link rel="manifest" href={`${siteUrl}/manifest.json`} />
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;700&family=Roboto:wght@400;500;700&family=Roboto+Mono:wght@400;500&display=swap" rel="preload" as="style" />
</head>
